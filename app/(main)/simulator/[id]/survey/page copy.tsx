"use client";import { useState, useEffect } from 'react';import { createClient } from '@supabase/supabase-js';import { toast } from 'react-hot-toast';import SimulatorTabs from '../../SimulatorTabs';const supabase = createClient(  process.env.NEXT_PUBLIC_SUPABASE_URL!,  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!);export default function SurveyTab({ params }) {  const [formData, setFormData] = useState({});  const [mode, setMode] = useState('build'); // 'build' or 'url'  const [questionsText, setQuestionsText] = useState('');  const [surveyUrl, setSurveyUrl] = useState('');  const [editingIdx, setEditingIdx] = useState(null);  const [editValue, setEditValue] = useState({ question: '', type: '', answers: [] });  const [parsedQuestions, setParsedQuestions] = useState([]);  const [loading, setLoading] = useState(true);  // Debugging: Log initial parsedQuestions  console.log("parsedQuestions initial:", parsedQuestions);  // Fetch survey_mode for tab filtering  useEffect(() => {    if (!params.id) return;    supabase      .from('surveys')      .select('survey_mode')      .eq('id', params.id)      .single()      .then(({ data }) => {        if (data) setFormData(data);      });  }, [params.id]);  // Load existing survey questions if in build mode  useEffect(() => {    if (!params.id) return;    supabase      .from('surveys')      .select('questions')      .eq('id', params.id)      .single()      .then(({ data, error }) => {        if (error) {          toast.error('Failed to load survey questions: ' + error.message);          return;        }        if (data?.questions) {          try {            const parsed = JSON.parse(data.questions);            setQuestionsText(parsed.raw || '');          } catch {            setQuestionsText(data.questions);          }        }      });  }, [params.id]);  // Load questions from 'questions' table  useEffect(() => {    setLoading(true);    if (!params.id) {      setParsedQuestions([]);      setLoading(false);      return;    }    supabase      .from('questions')      .select('question_text, question_type, answer_option, question_order')      .eq('survey_id', params.id)      .order('question_order', { ascending: true })      .then(({ data, error }) => {        console.log("Supabase questions data:", data, "error:", error);        if (error) {          toast.error('Failed to load questions: ' + error.message);          setParsedQuestions([]);          setLoading(false);          return;        }        if (Array.isArray(data)) {          setParsedQuestions(            data.map(q => ({              question: q.question_text,              type: q.question_type,              answers: Array.isArray(q.answer_option)                ? q.answer_option                : typeof q.answer_option === 'string'                  ? JSON.parse(q.answer_option)                  : [],            }))          );        } else {          setParsedQuestions([]);        }        setLoading(false);      });  }, [params.id]);  // Debugging: Log parsedQuestions after set  useEffect(() => {    console.log("parsedQuestions after set:", parsedQuestions);  }, [parsedQuestions]);  // Save handler  const handleSaveSurvey = async () => {    try {      const { error } = await supabase        .from('surveys')        .update({ questions: JSON.stringify({ raw: questionsText }) })        .eq('id', params.id);      if (error) throw error;      const parsed = questionsText.split('\n\n').map((q, i) => {        const [question, type, ...answers] = q.split('\n').map(line => line.replace(/^Q: |^Type: |^A: /, ''));        return { question, type, answers, question_order: i };      });      await supabase        .from('questions')        .delete()        .eq('survey_id', params.id);      for (let pq of parsed) {        await supabase          .from('questions')          .insert({            survey_id: params.id,            question_text: pq.question,            question_type: pq.type,            answer_option: JSON.stringify(pq.answers),            question_order: pq.question_order,          });      }      // Reload questions from DB      const { data: questionsData } = await supabase        .from('questions')        .select('question_text, question_type, answer_option, question_order')        .eq('survey_id', params.id)        .order('question_order', { ascending: true });      setParsedQuestions(        Array.isArray(questionsData)          ? questionsData.map(q => ({              question: q.question_text,              type: q.question_type,              answers: Array.isArray(q.answer_option)                ? q.answer_option                : typeof q.answer_option === 'string'                  ? JSON.parse(q.answer_option)                  : [],            }))          : []      );      toast.success('Survey and questions saved!');    } catch (err) {      toast.error('Error saving survey.');    }  };  if (!Array.isArray(parsedQuestions)) {    console.error("parsedQuestions is not an array!", parsedQuestions);    return <div>Error: parsedQuestions is not an array</div>;  }  // If the page is loading, show a simple loading indicator.  // This prevents rendering children components with undefined props.  if (loading) {    return (      <div className="p-8 flex justify-center">        <div className="text-center text-gray-500">Loading survey...</div>      </div>    );  }  return (    <div className="p-8 flex justify-center">      <div className="w-full max-w-2xl">        <SimulatorTabs active="survey" id={params.id} surveyType={formData.survey_mode} />        {/* Survey Mode Selection */}        <div className="mb-6 flex gap-4">          <button            className={`px-4 py-2 rounded ${mode === 'build' ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700'}`}            onClick={() => setMode('build')}          >            Build a Survey          </button>          <button            className={`px-4 py-2 rounded ${mode === 'url' ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700'}`}            onClick={() => setMode('url')}          >            Insert Survey URL          </button>        </div>        {/* Build a Survey Form */}        {mode === 'build' && (          <div className="mb-8">            <label className="form-label block mb-2">              Paste Survey Questions & Answers (use format below):            </label>            <div className="text-sm text-gray-500 mb-2">              <pre className="bg-gray-50 p-2 rounded overflow-x-auto w-full">Q: Your question text here<br></br>Type: single_select_radio | multiple_select | rating_scale | single_select_dropdown | user_input<br></br>A: Answer 1<br></br>              </pre>            </div>            <textarea              className="w-full border rounded px-3 py-2 mb-4"              rows={16}              value={questionsText}              onChange={e => setQuestionsText(e.target.value)}              placeholder={`Q: How often do you typically go on vacation per year?Type: single_select_radioA: Once a yearA: 2-3 times a yearA: 4 or more times a yearA: Less than once a yearQ: What is your primary motivation for traveling?Type: single_select_radioA: RelaxationA: AdventureA: Cultural explorationA: Visiting friends and family...`}            />            <button              className="bg-blue-600 text-white px-5 py-2 rounded-lg font-bold shadow hover:bg-blue-700 transition"              onClick={handleSaveSurvey}            >              Save Survey            </button>            {/* Display Parsed Questions */}            <div className="space-y-4 mt-6">              {loading ? (                <div className="text-center text-gray-500">Loading questions...</div>              ) : (                (parsedQuestions ?? []).map((pq, idx) => (                  <div                    key={pq.question || idx}                    className="border rounded p-4 bg-gray-50 flex flex-col"                  >                    {editingIdx === idx ? (                      <div>                        <input                          className="w-full border rounded px-2 py-1 mb-2"                          value={editValue.question}                          onChange={e => setEditValue({ ...editValue, question: e.target.value })}                          placeholder="Question"                        />                        <select                          className="w-full border rounded px-2 py-1 mb-2"                          value={editValue.type}                          onChange={e => setEditValue({ ...editValue, type: e.target.value })}                        >                          <option value="single_select_radio">Single Select Radio</option>                          <option value="multiple_select">Multiple Select</option>                          <option value="rating_scale">Rating Scale</option>                          <option value="single_select_dropdown">Single Select Dropdown</option>                          <option value="user_input">User Input</option>                        </select>                        <textarea                          className="w-full border rounded px-2 py-1 mb-2 resize-none"                          rows={3}                          style={{ maxHeight: '120px', minHeight: '60px' }}                          value={typeof editValue.answers === 'string'                            ? editValue.answers                            : editValue.answers.join('\n')}                          onChange={e =>                            setEditValue({                              ...editValue,                              answers: e.target.value,                            })                          }                          placeholder="Answers (one per line)"                        />                        <button                          className="bg-blue-500 text-white px-3 py-1 rounded mr-2"                          onClick={async () => {                            const updatedAnswers = typeof editValue.answers === 'string'                              ? editValue.answers.split('\n').map(a => a.trim()).filter(Boolean)                              : editValue.answers;                            await supabase                              .from('questions')                              .update({                                question_text: editValue.question,                                question_type: editValue.type,                                answer_option: JSON.stringify(updatedAnswers),                              })                              .eq('survey_id', params.id)                              .eq('question_order', idx);                            toast.success('Question updated!');                            setEditingIdx(null);                            // Reload questions from DB                            const { data, error } = await supabase                              .from('questions')                              .select('question_text, question_type, answer_option, question_order')                              .eq('survey_id', params.id)                              .order('question_order', { ascending: true });                            setParsedQuestions(                              Array.isArray(data)                                ? data.map(q => ({                                    question: q.question_text,                                    type: q.question_type,                                    answers: Array.isArray(q.answer_option)                                      ? q.answer_option                                      : typeof q.answer_option === 'string'                                        ? JSON.parse(q.answer_option)                                        : [],                                  }))                                : []                            );                          }}                        >                          Save                        </button>                        <button                          className="bg-gray-300 px-3 py-1 rounded"                          onClick={() => setEditingIdx(null)}                        >                          Cancel                        </button>                      </div>                    ) : (                      <>                        <div className="font-bold mb-1">Q: {pq.question}</div>                        <div className="text-sm mb-1">Type: {pq.type}</div>                        <ul className="list-disc ml-6 mb-2">                          {(pq.answers ?? []).map((a, i) => (                            <li key={i}>{a}</li>                          ))}                        </ul>                        <button                          className="bg-yellow-500 text-white px-3 py-1 rounded"                          onClick={() => {                            setEditingIdx(idx);                            setEditValue({                              question: pq.question,                              type: pq.type,                              answers: pq.answers,                            });                          }}                        >                          Edit                        </button>                      </>                    )}                  </div>                ))              )}            </div>          </div>        )}        {/* Insert Survey URL Form */}        {mode === 'url' && (          <div className="mb-8">            <label className="form-label block mb-2">Survey URL:</label>            <input              type="text"              className="w-full border rounded px-3 py-2 mb-4"              value={surveyUrl}              onChange={e => setSurveyUrl(e.target.value)}              placeholder="Paste your survey URL here..."            />          </div>        )}      </div>    </div>  );}